class Solution {
    public int[][] highFive(int[][] items) {
        TreeMap<Integer,Queue<Integer>> scores=new TreeMap<>();//Tree map as it stores id in ascending order. 1,2,3/
        for(int[] item:items){
            int id=item[0];
            int score=item[1];
            if(!scores.containsKey(id)){
                scores.put(id,new PriorityQueue<>((a,b)->(b-a)));//Priority queue usaully used minheap to store values in ascending order. But are storing in descendinvg order by doing (a,b)->(b-a)
            }
            scores.get(id).add(score);//immediately after creating the queue the score is inserted. remember this is not in the else loop.
        }
        List<int[]> ans=new ArrayList<>();//list to store arrays containing id and score
        for(int id:scores.keySet()){
            int sum=0;
            for(int i=0;i<5;i++){
                sum=sum+scores.get(id).poll();
            }
            ans.add(new int[]{id,sum/5});//appending the array containing id and score to the list
           
        }
         int[][] ansArray=new int[ans.size()][];//two dimensional array,
         return ans.toArray(ansArray);
    }
}


class Solution {
    public int[][] highFive(int[][] items) {
        HashMap<Integer, PriorityQueue<Integer>> map=new HashMap<>();
        for(int[] item: items){
            int id=item[0];
            int score=item[1];
            if(!map.containsKey(id)){
                map.put(id, new PriorityQueue<>());//min heap
            }
            PriorityQueue<Integer> pq = map.get(id);
            pq.add(score);
            if(pq.size()>5) {//in minheap the smallest score is at the top of the heap. 
                pq.poll();//removes top smallest scores until we have 5 highest scores left in the pq.
            }
        }
        List<int[]> ans=new ArrayList<>();
        for(int id:map.keySet()){
            int sum=0;
            PriorityQueue<Integer> pq= map.get(id);
            while(!pq.isEmpty()){
                sum+=pq.poll();
            }
            ans.add(new int[]{id,sum/5});


        }
        int[][] ansArray=new int[ans.size()][];// to convert into 2d array. ans.size() tells how many students are there. ans=[{1,91},{1,89},
                                                                                                                                {2,99}, {2,87}] this is a list of int array.
        return ans.toArray(ansArray);// converting ans to arrayof 2D[[1,91], [1,89],
                                                                     [2,99],[2,87]]
    }
}TC:O(n)
SC:O(m) m is the number of unique student ids.

Time Complexity:
Insertion and removal in PriorityQueue is 
O(log5)=O(1) since the size is capped at 5.
Overall time complexity is 
O(Nlog5)=O(N), where 
N is the number of scores.
Space Complexity:
O(UÃ—5) where 
U is the number of unique student IDs since each student stores at most 5 scores.

Step 1: Group Scores by Student ID
Iterate through each score record.
Group scores by student ID using a HashMap.
For each student:
Use a PriorityQueue to keep only the top 5 scores.
If the queue size exceeds 5, remove the smallest element using poll().
Step 2: Calculate Averages
Iterate through each student in the map.
Sum up the scores in the PriorityQueue.
Calculate the average by dividing the sum by 5.
Step 3: Prepare the Result
Store the result as a list of integer arrays (List<int[]>).
Convert the list to a 2D array before returning.
