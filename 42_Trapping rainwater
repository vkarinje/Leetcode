class Solution {
    public int trap(int[] height) {
        int left=0;
        int right=height.length-1;
        int leftbar=height[0];
        int rightbar=height[height.length-1];
        int ans=0;
        while(left<=right){//until left and right pointers meet
            if(leftbar<rightbar){//which  bar is the limiting bar
                if(height[left]>leftbar){//if the element that we are seeing now becomes the highest element at left it will not store any water
                    leftbar=height[left];
                }
                else{
                    ans+=leftbar-height[left];
                    left++;
                }
            }
            else{
                if(height[right]>rightbar){
                    rightbar=height[right];

                }
                else{
                    ans+=rightbar-height[right];
                    right--;
                }
            }
        }
        return ans;
        
    }
}
TC:O(n)
SC:O(1)
To solve the Trapping Rain Water problem efficiently, I used the two-pointer approach because it allows us to calculate the trapped water in O(N) time complexity with O(1) space complexity. 
I initialized two pointers: left at the start and right at the end of the array, along with two variables leftbar and rightbar to keep track of the highest bars on both sides. By comparing leftbar and rightbar, 
I moved the pointers inward. If leftbar was smaller, I checked the left pointer, calculated the water trapped if any, and updated leftbar. Otherwise, I did the same for the right pointer.
