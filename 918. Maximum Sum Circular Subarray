class Solution {
    public int maxSubarraySumCircular(int[] nums) {
        int max=Integer.MIN_VALUE;
        int min=Integer.MAX_VALUE;
        int currMax=0;
        int currMin=0;
        int total=0;
        for(int i=0;i<nums.length;i++){
            currMax+=nums[i];
            max=Math.max(max,currMax);
            currMax=Math.max(currMax,0);//if the current currMax is negative value we make it 0 as we dont consider -ve values to be carried forward
            currMin+=nums[i];
            min=Math.min(min,currMin);
            currMin=Math.min(currMin,0);
            total=total+nums[i];

            


        }

        if(max<0) return max;// if all elements are -ve, the sum will be 0. this doesnot make sense. so we return max itself
        return Math.max(max,total-min);//we get the answer by finding max of non circular array max sum and circular array max sum. Here, max is the maximum sum of non-circular array. We get the maximum sum of non-circular array by doing total sum of the entire array(total)-minimum sub array(min)
    }
}
TC:O(N)
SC:O(1)
