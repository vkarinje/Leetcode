class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        self.ans={}
        self.preorderindex=0
        for ind,val in enumerate(inorder): // should be inorder only as we are storing these values in the map
            self.ans[val]=ind
        return self.arraytotree(preorder,0,len(inorder)-1)
    
    def arraytotree(self,preorder,left,right):
        if left>right:
            return None
        root_val=preorder[self.preorderindex]
        self.preorderindex=self.preorderindex+1
        root=TreeNode(root_val)
        root.left=self.arraytotree(preorder,left,self.ans[root_val]-1)
        root.right=self.arraytotree(preorder,self.ans[root_val]+1,right)
        return root


Time: O(N)//N is the number of nodes
Space:O(N)//Nis the number of nodes
