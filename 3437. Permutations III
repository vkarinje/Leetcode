class Solution {
    // Main method to generate all valid permutations of numbers from 1 to n
    public int[][] permute(int n) {
        // Step 1: Initialize the nums array with numbers from 1 to n
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1; // nums = [1, 2, ..., n]
        }

        // Step 2: Initialize auxiliary data structures
        int[] candidate = new int[n]; // Holds the current permutation being built
        boolean[] used = new boolean[n]; // Tracks which numbers are used
        List<List<Integer>> permutations = new ArrayList<>(); // Stores all valid permutations

        // Step 3: Start the recursive backtracking process
        permute(nums, 0, used, candidate, permutations);

        // Step 4: Convert the list of permutations to a 2D array
        int[][] result = new int[permutations.size()][n];
        for (int i = 0; i < result.length; i++) {//calculates row
            for (int j = 0; j < result[0].length; j++) {//calculates columns
                result[i][j] = permutations.get(i).get(j);
            }
        }

        // Step 5: Return the 2D array of permutations
        return result;
    }

    // Recursive helper method for generating permutations
    private void permute(int[] nums, int pos, boolean[] used, int[] candidate, List<List<Integer>> permutations) {
        // Base Case: If the current position equals the length of nums,
        // it means we have formed a complete permutation
        if (pos == nums.length) {
            // Convert the candidate array to a list and add to permutations
            List<Integer> res = new ArrayList<>();
            for (int i = 0; i < candidate.length; i++) {
                res.add(candidate[i]);
            }
            permutations.add(res); // Store the current permutation
            return; // Backtrack to explore other permutations
        }

        // Step 6: Loop through all numbers to build the permutation
        for (int i = 0; i < nums.length; i++) {
            // Check if the current number is already used
            if (!used[i]) {
                // Check the odd-even alternation condition
                // Either it's the first position OR
                // The current number must have a different parity than the previous one
                if (pos == 0 || candidate[pos - 1] % 2 != nums[i] % 2) {
                    // Place the current number at the current position
                    candidate[pos] = nums[i];
                    used[i] = true; // Mark as used

                    // Recursively fill the next position
                    permute(nums, pos + 1, used, candidate, permutations);

                    // Backtrack: Unmark the number to try other possibilities
                    used[i] = false;
                }
            }
        }
    }
}
This problem generates all permutations of numbers from 1 to n, ensuring no two consecutive numbers are both odd or both even.

Approach:
Start by creating an array nums that holds the numbers from 1 to n. This array will be used to generate permutations.
We also initialize an array candidate to store the current permutation as we build it.
Use a boolean[] used array to track whether a number has been used in the current permutation.

This is a backtracking problem. We use a recursive helper function permute to explore all the possible permutations.
Base Case: When we have filled the candidate array completely (i.e., pos == nums.length), we know we have a valid permutation. 
We then convert this permutation into a list and add it to the permutations list.

For each position pos in the permutation, we try every number in nums that hasn't been used yet.
Before placing the number at position pos, we check if it satisfies the parity constraint: if the previous number (candidate[pos-1]) is even,
the current number must be odd, and vice versa. This ensures adjacent elements have different parity.
If the parity constraint is satisfied, we place the number at pos, mark it as used, and recursively try to fill the next position.

Time Complexity: O(n! * n)

We generate n! permutations, and for each permutation, we perform up to n checks for the parity condition
Space Complexity: O(n! * n)

For storing all the valid permutations, the space required is proportional to the number of permutations (n!) and the length of each permutation (n)
This approach is efficient because it prunes invalid branches early by checking the odd-even condition, reducing unnecessary calculations.
